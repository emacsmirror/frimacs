;;; ob-fricas.el --- A FriCAS backend for Org-Babel  -*- lexical-binding: t -*-

;; Copyright (C) 2022 Paul Onions

;; Author: Paul Onions <paul.onions@acm.org>
;; Keywords: FriCAS, computer algebra, extensions, tools
;; URL: https://github.com/pdo/frimacs
;; Package-Requires: ((emacs "26.1") (frimacs "1.0"))
;; Version: 1.0

;; This file is not part of GNU Emacs.

;; SPDX-License-Identifier: MIT

;; This file is free software, see the LICENCE file in this directory
;; for more information.

;;; Commentary:

;; This is an org-babel extension that integrates the FriCAS computer
;; algebra system into org-mode, allowing a literate development &
;; presentation style with easy publishing to HTML, PDF, etc.  It
;; requires the ``frimacs'' package also to be installed.
;;
;; See the ``Working with source code'' chapter of the Org manual for
;; details on using org-babel functionality in Org files.
;;
;; To enable this extension put
;;
;;  (require 'ob-fricas)
;;
;; in your ~/.emacs initialisation file.
;;
;; There are two language names defined in this extension: ``fricas''
;; and ``spad''.  The first is for running arbitrary code in the
;; FriCAS REPL, and corresponds to ``frimacs-input-mode''.  The second
;; is for embedding SPAD source code blocks into an Org document, and
;; corresponds to ``frimacs-spad-mode''.
;;
;; Actually there is also a third: ``axiom'' -- this is a synonym for
;; ``fricas'' and is defined for backward compatibility with the
;; ob-axiom package.
;;
;; The default behaviour of ``fricas'' (and thus ``axiom'') source
;; code blocks in ob-fricas is that of ``:results output'' mode,
;; i.e. scripting mode in the terminology of the Org manual.  If this
;; is unfamiliar to you, see the ``Header arguments'' section of the
;; ``Working with source code'' chapter in the Org manual for more
;; information on what this means.  By default, all of the input line
;; to FriCAS, including the prompt, as well as the output generated by
;; FriCAS, is echoed in the output captured by Org.  To change this
;; use the extra header options explained below.
;;
;; There are three extra header options (non-standard org-babel options)
;; for ``#+BEGIN_SRC fricas'' source code blocks:-
;;
;;   :block-read <yes/no/auto>  (defaults to auto)
;;   :show-prompt <yes/no>      (defaults to yes)
;;   :show-input <yes/no>       (defaults to yes)
;;
;; The block-read option forces ob-fricas to send the entire code block
;; to the running FriCAS process via a temporary file.  This allows
;; ``pile mode'' source code to be handled correctly.  Otherwise
;; ob-fricas sends each line of the code block individually to the
;; FriCAS process for interpretation.
;;
;; The show-prompt option allows to enable or inhibit the display of
;; the FriCAS REPL prompt on a block-by-block basis.
;;
;; The show-input option allows to enable or inhibit the display of
;; the FriCAS input command/source on a block-by-block basis.
;;
;; Finally, a useful tip for FriCAS.  If you want to suppress the
;; numbering of prompts and output results that FriCAS normally
;; generates, put the following at the start of your Org file:-
;;
;; #+BEGIN_SRC fricas :results silent :exports none
;; )set message prompt plain
;; )boot $IOindex := nil
;; #+END_SRC

;;; Code:

(require 'ob)
(require 'ob-ref)
(require 'ob-comint)
(require 'ob-eval)

(require 'cl-lib)

(require 'frimacs-process-mode)
(require 'frimacs-input-mode)
(require 'frimacs-spad-mode)

;; Header arguments
(defconst org-babel-header-args:fricas
  '((block-read (no yes auto))
    (show-prompt (no yes))
    (show-input (no yes))))

(defvar org-babel-default-header-args:fricas
  '((:session . "FriCAS Org-Babel Session")
    (:block-read . "auto")
    (:show-prompt . "yes")
    (:show-input . "yes")))

;; File extensions for FriCAS files
(add-to-list 'org-babel-tangle-lang-exts '("fricas" . "input"))
(add-to-list 'org-babel-tangle-lang-exts '("spad" . "spad"))

;; Configure org editing options
(add-to-list 'org-src-lang-modes '("fricas" . frimacs-input))
(add-to-list 'org-src-lang-modes '("spad" . frimacs-spad))

;;; Internal helper functions
;;;
(defun ob-fricas--starify-name (str)
  "Ensure STR is a valid buffer name by wrapping with asterisks if necessary."
  (let ((name str))
    (unless (eql (aref str 0) ?*)
      (setq name (concat "*" name)))
    (unless (eql (aref str (1- (length str))) ?*)
      (setq name (concat name "*")))
    name))

;;; Org framework functions -- functions invoked by Org-mode activity
;;;
(defun ob-fricas-initiate-session (session params)
  "Start a FriCAS session for use by org-babel.

Use SESSION name and PARAMS parameters."
  ;;(message "ob-fricas-initiate-session\n %S\n %S" session params)
  (if (string= session "none")
      session
    (let ((session-name
           (if (stringp session)
               (ob-fricas--starify-name session)
             frimacs-process-repl-buffer-name)))
      (let ((frimacs-process-repl-buffer-name session-name)) ; dynamic binding
        (if (org-babel-comint-buffer-livep session-name)
            session-name
          (frimacs-process-start frimacs-process-program)
          session-name)))))

(defun ob-fricas-var-to-fricas (val)
  "Convert elisp VAL into a FriCAS value."
  ;;(message "ob-fricas-var-to-fricas\n %S" val)
  (if (listp val)
      (concat "[" (mapconcat #'ob-fricas-var-to-fricas val ", ") "]")
    (format "%S" val)))

(defun org-babel-variable-assignments:fricas (params)
  "Convert PARAMS list to FriCAS assignments."
  ;;(message "org-babel-variable-assignments:fricas\n %S" params)
  (let ((vars (cl-mapcan (lambda (param)
                           (and (eql :var (car param))
                                (list (cdr param))))
                         params)))
    (mapcar
     (lambda (pair)
       (format "%S := %s" (car pair) (ob-fricas-var-to-fricas (cdr pair))))
     vars)))

(defun org-babel-expand-body:fricas (body params)
  "Expand BODY with PARAMS."
  ;;(message "org-babel-expand-body:fricas\n %S\n %S" body params)
  (mapconcat #'identity (append (org-babel-variable-assignments:fricas params)
                                (list body))
             "\n"))

(defun org-babel-execute:fricas (body params)
  "Execute a block of FriCAS code with org-babel.

Execute BODY in the context given by PARAMS.
This function is called by `org-babel-execute-src-block'."
  ;;(message "org-babel-execute:fricas\n %S\n %S" body params)
  (let ((session (ob-fricas-initiate-session
                  (cdr (assoc :session params)) params))
        (block-read (cdr (assoc :block-read params))))
    (if (or (equal block-read "yes")
            (and (equal block-read "auto")
                 (ob-fricas--body-needs-block-read body)))
        (ob-fricas--execute-by-block-read session body params)
      (ob-fricas--execute-line-by-line session body params))))

(defun ob-fricas--body-needs-block-read (body)
  "Return non-nil if BODY needs a block read."
  (string-match "^[[:space:]]+[[:graph:]]" body))

(defun ob-fricas--execute-by-block-read (session body params)
  "Execute BODY in context of PARAMS using SESSION."
  (let* ((results-value (string-match "\\<value\\>" (cdr (assoc :results params))))
         (show-prompt (and (not results-value)
                           (equal (cdr (assoc :show-prompt params)) "yes")))
         (show-input (and (not results-value)
                          (equal (cdr (assoc :show-input params)) "yes")))
         (tmp-filename (make-temp-file "fricas" nil ".input")))
    (with-temp-buffer
      (insert (org-babel-expand-body:fricas body params))
      (write-region (point-min) (point-max) tmp-filename))
    (let ((session-name (if (stringp session)
                            (ob-fricas--starify-name session)
                          frimacs-process-repl-buffer-name)))
      (let ((frimacs-process-repl-buffer-name session-name)) ; dynamic binding
        (with-frimacs-process-query-buffer
         (frimacs-process-redirect-send-command
          (if show-input
              (format ")read %s" tmp-filename)
            (format ")read %s )quiet" tmp-filename))
          (current-buffer) nil nil t nil show-prompt)
         (let ((delete-trailing-lines t)) ; dynamic binding
           (delete-trailing-whitespace))
         (when results-value
           ;; remove type description
           (goto-char (point-max))
           (let ((pt (re-search-backward "^[[:space:]]*Type:" nil t)))
             (when pt
               (goto-char pt)
               (delete-region (point) (point-max)))))
         (buffer-substring (point-min) (point-max)))))))

(defun ob-fricas--execute-line-by-line (session body params)
  "Execute BODY in context of PARAMS using SESSION."
  (let* ((results-value (string-match "\\<value\\>" (cdr (assoc :results params))))
         (show-prompt (and (not results-value)
                           (equal (cdr (assoc :show-prompt params)) "yes")))
         (show-input (and (not results-value)
                          (equal (cdr (assoc :show-input params)) "yes")))
         (lines (split-string (org-babel-expand-body:fricas body params) "\n"))
         (session-name (if (stringp session)
                           (ob-fricas--starify-name session)
                         frimacs-process-repl-buffer-name))
         (frimacs-process-repl-buffer-name session-name)) ; dynamic binding
    (with-frimacs-process-query-buffer
     (dolist (line lines)
       (when results-value
         (erase-buffer))
       (beginning-of-line)
       (unless (string-match "^[[:space:]]*$" line)
         (frimacs-process-redirect-send-command
          line (current-buffer) nil t t show-input show-prompt)))
     (let ((delete-trailing-lines t)) ; dynamic binding
       (delete-trailing-whitespace))
     (when results-value
       ;; remove type description
       (goto-char (point-max))
       (let ((pt (re-search-backward "^[[:space:]]*Type:" nil t)))
         (when pt
           (goto-char pt)
           (delete-region (point) (point-max)))))
     (buffer-substring (point-min) (point-max)))))

;; Add support for "axiom" language specifier (for backward compatibility with ob-axiom)
(add-to-list 'org-babel-tangle-lang-exts '("axiom" . "input"))
(add-to-list 'org-src-lang-modes '("axiom" . frimacs-input))

(defconst org-babel-header-args:axiom
  '((block-read (no yes auto))
    (show-prompt (no yes))
    (show-input (no yes))))

(defvar org-babel-default-header-args:axiom
  '((:session . "FriCAS Org-Babel Session")
    (:block-read . "auto")
    (:show-prompt . "yes")
    (:show-input . "yes")))

(defalias 'org-babel-variable-assignments:axiom #'org-babel-variable-assignments:fricas)
(defalias 'org-babel-expand-body:axiom #'org-babel-expand-body:fricas)
(defalias 'org-babel-execute:axiom #'org-babel-execute:fricas)

(provide 'ob-fricas)

;;; ob-fricas.el ends here
